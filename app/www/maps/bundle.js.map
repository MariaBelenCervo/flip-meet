{"version":3,"sources":["app.js","controllers.js","services.js","controllers/CommentAddCtrl.js","controllers/HomeCtrl.js","controllers/LoginCtrl.js","controllers/PostAddCtrl.js","controllers/PostCtrl.js","controllers/ProfileCtrl.js","controllers/ProfileEditionCtrl.js","controllers/RegisterCtrl.js","services/Auth.js","services/Category.js","services/Comment.js","services/Interest.js","services/Post.js","services/Storage.js","services/User.js"],"names":[],"mappingslKA;AACA;ACDA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrpfile":"../js/bundle.js","sourcesContent":["// Ionic Starter App\n\n// angular.module is a global place for creating, registering and retrieving Angular modules\n// 'starter' is the name of this angular module example (also set in a <body> attribute in index.html)\n// the 2nd parameter is an array of 'requires'\n// 'starter.controllers' is found in controllers.js\nangular.module('FlipMeet', ['ionic', 'FlipMeet.controllers', 'FlipMeet.services'])\n\n.run(function($ionicPlatform, $ionicPopup, $rootScope, $state, Auth) {\n\n  /**\n   * Event Listener que evita que un usuario ingrese a la app si no está autenticado\n   */\n  $rootScope.$on('$ionicView.beforeEnter', function() {\n      if($state.current.name != 'login' && $state.current.name != 'register' && !Auth.isLogged()) {\n        $state.go('login');\n      }\n  });\n\n\n  $ionicPlatform.ready(function() {\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n    // for form inputs)\n    if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      cordova.plugins.Keyboard.disableScroll(true);\n\n    }\n    if (window.StatusBar) {\n      // org.apache.cordova.statusbar required\n      StatusBar.styleDefault();\n    }\n\n    // Detecto el cambio de state.\n    // El evento que uso es $stateChangeStart\n    // https://github.com/angular-ui/ui-router/wiki#state-change-events\n    $rootScope.$on('$stateChangeStart', function(e, toState, toParams, fromState, fromParams) {\n      // toState va a contener el objeto con el que defino el state.\n      // Eso incluye sus propiedades views, url, data, etc.\n\n      // Usando toState, pregunto si requiere autenticación.\n      if(toState.data !== undefined && toState.data.requireAuth === true) {\n        // Esta ruta requiere autenticación, así que verifico que el usuario haya iniciado sesión.\n        if(!Auth.isLogged()) {\n          // Cancelo el cambio de state.\n          e.preventDefault();\n\n          $ionicPopup.alert({\n            'title': 'Autenticación requerida.',\n            'template': 'Para realizar esta acción necesita iniciar sesión.'\n          }).then(function() {\n            // Redirecciono al login.\n            $state.go('login');\n          });\n        }\n      }\n    });\n  });\n})\n\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n\n  .state('login', {\n    url: '/login',\n    templateUrl: 'templates/login.html',\n    controller: 'LoginCtrl'\n  })\n\n  .state('register', {\n    url: '/register',\n    templateUrl: 'templates/register.html',\n    controller: 'RegisterCtrl'\n  })\n\n  .state('app', {\n    url: '/app',\n    abstract: true,\n    templateUrl: 'templates/menu.html'\n  })\n\n  .state('app.home', {\n    url: '/home',\n    data: {\n        requireAuth: true\n    },\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/home.html',\n        controller: 'HomeCtrl'\n      }\n    }\n  })\n\n  .state('app.post', {\n    url: '/post/:id',\n    data: {\n        requireAuth: true\n    },\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/post.html',\n        controller: 'PostCtrl'\n      }\n    }\n  })\n\n  .state('app.post-add', {\n    url: '/post-add',\n    data: {\n        requireAuth: true\n    },\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/post_add.html',\n        controller: 'PostAddCtrl'\n      }\n    }\n  })\n\n  .state('app.comment-add', {\n    url: '/post/:id/comment-add',\n    data: {\n        requireAuth: true\n    },\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/comment_add.html',\n        controller: 'CommentAddCtrl'\n      }\n    }\n  })\n\n  .state('app.profile', {\n    url: '/profile',\n    data: {\n        requireAuth: true\n    },\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/profile.html',\n        controller: 'ProfileCtrl'\n      }\n    }\n  })\n\n  .state('app.profile-edit', {\n    url: '/profile/:id/edit',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/profile_edit.html',\n        controller: 'ProfileEditionCtrl'\n      }\n    }\n  });\n\n  // if none of the above states are matched, use this as the fallback\n  $urlRouterProvider.otherwise('/app/home');\n})\n// Defino una constante para contener la ruta de la app front end\n.constant('API', 'http://localhost/FlipMeet/app/www')\n// Defino una constante para contener la ruta de la api back end\n.constant('API_MVC', 'http://localhost/FlipMeet/mvc/public/api');","//Creo el módulo FlipMeet.controllers\nangular.module('FlipMeet.controllers', []);","//Creo el módulo FlipMeet.services\r\nangular.module('FlipMeet.services', []);","/**\r\n * Controller que maneja la vista comment_add.html y que procesa los datos necesarios para el agregado\r\n * de comentarios a la publicación correspondiente\r\n */\r\nangular.module('FlipMeet.controllers')\r\n.controller('CommentAddCtrl', [\r\n\t'$scope',\r\n\t'$state',\r\n\t'$stateParams',\r\n\t'$ionicPopup',\r\n\t'Comment',\r\n\t'Storage',\r\n\tfunction($scope, $state, $stateParams, $ionicPopup, Comment, Storage) {\r\n\t\t/** @var {object} comment - Inicializo el objeto comment */\r\n\t\t$scope.comment = {\r\n\t\t\tfkuser: null,\r\n\t\t\tfkpost: null,\r\n\t\t\tcomment: null\r\n\t\t};\r\n\r\n\t\t// Obtengo el fkuser del localStorage\r\n\t\t$scope.comment.fkuser = Storage.get('userData').id;\r\n\r\n\t\t// Obtengo el fkpost del servicio $stateParams\r\n\t\t$scope.comment.fkpost = $stateParams.id;\r\n\t\t\r\n\t\t/**\r\n\t\t * @function add - Ejecuta la función add() del servicio Comment\r\n\t\t * @param {object} comment\r\n\t\t */\r\n\t\t$scope.add = function(comment) {\r\n\t\t\tComment.add(comment)\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\tif(response.success) {\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\ttitle: '¡Éxito!',\r\n\t\t\t\t\t\t\ttemplate: 'El comentario ha sido agregado exitosamente',\r\n\t\t\t\t\t\t\tokText: 'Aceptar'\r\n\t\t\t\t\t\t}).then(function() {\r\n\t\t\t\t\t\t\t$state.go('app.home');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\ttitle: 'Error',\r\n\t\t\t\t\t\t\ttemplate: response.error,\r\n\t\t\t\t\t\t\tokText: 'Aceptar'\r\n\t\t\t\t\t\t}).then(function() {\r\n\t\t\t\t\t\t\tif(response.login) {\r\n\t\t\t\t\t\t\t\t$state.go('login');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t};\r\n\t}\r\n]);","/**\r\n * Controller que maneja la vista home.html y que procesa los datos necesarios para la muestra\r\n * de publicaciones\r\n */\r\nangular.module('FlipMeet.controllers')\r\n.controller('HomeCtrl', [\r\n\t'$scope',\r\n\t'$state',\r\n\t'$ionicPopup',\r\n\t'$ionicLoading',\r\n\t'API',\r\n\t'Post',\r\n\tfunction($scope, $state, $ionicPopup, $ionicLoading, API, Post) {\r\n\t\t/** @var {array} posts - Inicializo el array posts */\r\n\t\t$scope.posts = [];\r\n\r\n\t\t/** @var {string} imgRoute - Contiene la ruta a los recursos de imagen */\r\n\t\t$scope.imgRoute = API + \"/img/\";\r\n\r\n\t\t/**\r\n\t\t * Event listener que trae todas las publicaciones antes de entrar a la vista\r\n\t\t */\r\n\t\t$scope.$on('$ionicView.beforeEnter', function() {\r\n\t\t\t$ionicLoading.show();\r\n\t\t\tPost.getAll()\r\n\t\t\t\t.then(function(data) {\r\n\t\t\t\t\t\t$scope.posts = data;\r\n\t\t\t\t\t\t$ionicLoading.hide();\r\n\t\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t}\r\n]);","/**\r\n * Controller que maneja la vista login.html y que procesa los datos necesarios para\r\n * el logueo de usuarios\r\n */\r\nangular.module('FlipMeet.controllers')\r\n.controller('LoginCtrl', [\r\n\t'$scope',\r\n\t'$state',\r\n\t'$ionicPopup',\r\n\t'Auth',\r\n\t'Storage',\r\n\tfunction($scope, $state, $ionicPopup, Auth, Storage) {\r\n\t\t/** @var {object} user - Inicializo el object user */\r\n\t\t$scope.user = {\r\n\t\t\temail: null,\r\n\t\t\tpassword: null\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @function login - Ejecuta la función login() del servicio Auth\r\n\t\t * @param {object} user\r\n\t\t */\r\n\t\t$scope.login = function(user) {\r\n\t\t\tAuth.login(user).then(\r\n\t\t\t\tfunction(response) {\r\n\t\t\t\t\tif(response.success) {\r\n\t\t\t\t\t\t$state.go('app.home');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\t'title': 'Error',\r\n\t\t\t\t\t\t\t'template': response.error\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @function logout - Ejecuta la función logout() del servicio Auth\r\n\t\t */\r\n\t\t$scope.logout = function() {\r\n\t\t\tAuth.logout().then(\r\n\t\t\t\tfunction(response) {\r\n\t\t\t\t\tif(response.success) {\r\n\t\t\t\t\t\t$state.go('login');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\t'title': 'Error',\r\n\t\t\t\t\t\t\t'template': response.error\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t};\r\n\t}\r\n]);","/**\r\n * Controller que maneja la vista post_add.html y que procesa los datos necesarios para\r\n * la creación de publicaciones\r\n */\r\nangular.module('FlipMeet.controllers')\r\n.controller('PostAddCtrl', [\r\n\t'$scope',\r\n\t'$state',\r\n\t'$ionicPopup',\r\n\t'Post',\r\n\t'Category',\r\n\t'Storage',\r\n\tfunction($scope, $state, $ionicPopup, Post, Category, Storage) {\r\n\t\t/** @var {object} post - Inicializo el object post */\r\n\t\t$scope.post = {\r\n\t\t\ttitle: null,\r\n\t\t\tlocation: null,\r\n\t\t\tdescription: null,\r\n\t\t\tfkuser: null,\r\n\t\t\tfkcategory: null,\r\n\t\t\tcategory: null\r\n\t\t};\r\n\r\n\t\t// Obtengo el fkuser del localStorage\r\n\t\t$scope.post.fkuser = Storage.get('userData').id;\r\n\t\t\r\n\t\t/** @var {array} categories - Inicializo el array categories */\r\n\t\t$scope.categories = [];\r\n\r\n\t\t/**\r\n\t\t * @function getAll - Ejecuta la función getAll() del servicio Category\r\n\t\t * @param {object} data\r\n\t\t * @return {array} categories\r\n\t\t */\r\n\t\tCategory.getAll().then(function(data) {\r\n\t\t\t$scope.categories = data;\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * @function add - Ejecuta la función add() del servicio Post\r\n\t\t * @param {object} post\r\n\t\t */\r\n\t\t$scope.add = function(post) {\r\n\t\t\tPost.add(post)\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\tif(response.success) {\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\ttitle: '¡Éxito!',\r\n\t\t\t\t\t\t\ttemplate: 'El ' + response.category + ' ha sido agregado exitosamente',\r\n\t\t\t\t\t\t\tokText: 'Aceptar'\r\n\t\t\t\t\t\t}).then(function() {\r\n\t\t\t\t\t\t\t$state.go('app.home');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\ttitle: 'Error',\r\n\t\t\t\t\t\t\ttemplate: response.error,\r\n\t\t\t\t\t\t\tokText: 'Aceptar'\r\n\t\t\t\t\t\t}).then(function() {\r\n\t\t\t\t\t\t\tif(response.login) {\r\n\t\t\t\t\t\t\t\t$state.go('login');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t};\r\n\t}\r\n]);","/**\r\n * Controller que maneja la vista post.html y que procesa los datos necesarios para\r\n * la muestra de una publicación específica con sus comentarios\r\n */\r\nangular.module('FlipMeet.controllers')\r\n.controller('PostCtrl', [\r\n\t'$scope',\r\n\t'$state',\r\n\t'$stateParams',\r\n\t'$ionicPopup',\r\n\t'$ionicLoading',\r\n\t'API',\r\n\t'Post',\r\n\tfunction($scope, $state, $stateParams, $ionicPopup, $ionicLoading, API, Post) {\r\n\t\t/** @var {object} post - Inicializo el object post */\r\n\t\t$scope.post = {\r\n\t\t\tid: null,\r\n\t\t\ttitle: null,\r\n\t\t\tdescription: null,\r\n\t\t\tcategory: null,\r\n\t\t\tlocation: null\r\n\t\t};\r\n\r\n\t\t// Obtengo el id del servicio $stateParams\r\n\t\t$scope.post.id = $stateParams.id;\r\n\r\n\t\t/** @var {string} imgRoute - Contiene la ruta a los recursos de imagen */\r\n\t\t$scope.imgRoute = API + \"/img/\";\r\n\r\n\t\t/**\r\n\t\t * Event listener que trae la publicación antes de entrar a la vista\r\n\t\t */\r\n\t\t$scope.$on('$ionicView.beforeEnter', function() {\r\n\t\t\tPost.get($scope.post.id)\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\t$scope.post = response.postData.data;\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\t\t/** @var {array} comments - Inicializo el array comments */\r\n\t\t$scope.comments = [];\r\n\r\n\t\t/**\r\n\t\t * Event listener que trae los comentarios de la publicación antes de entrar a la vista\r\n\t\t */\r\n\t\t$scope.$on('$ionicView.beforeEnter', function() {\r\n\t\t\tPost.getComments($scope.post.id)\r\n\t\t\t\t.then(function(data) {\r\n\t\t\t\t\t$scope.comments = data;\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\t}\r\n]);","/**\r\n * Controller que maneja la vista profile.html y que procesa los datos necesarios para\r\n * la visualización del perfil del usuario\r\n */\r\nangular.module('FlipMeet.controllers')\r\n.controller('ProfileCtrl', [\r\n\t'$scope',\r\n\t'$state',\r\n\t'$ionicPopup',\r\n\t'API',\r\n\t'Storage',\r\n\t'Interest',\r\n\t'User',\r\n\tfunction($scope, $state, $ionicPopup, API, Storage, Interest, User) {\r\n\t\t/** @var {object} user - Inicializo el object user */\r\n\t\t$scope.user = {\r\n\t\t\tid: null,\r\n\t\t\tname: null,\r\n\t\t\tlastname: null,\r\n\t\t\tlocation: null,\r\n\t\t\tbirthday: null,\r\n\t\t\tfkinterest: null,\r\n\t\t\tinterest: null\r\n\t\t};\r\n\r\n\t\t/** @var {string} imgRoute - Contiene la ruta a los recursos de imagen */\r\n\t\t$scope.imgRoute = API + \"/img/\";\r\n\r\n\t\t// Obtengo el user ID del localStorage\r\n\t\t$scope.user.id = Storage.get('userData').id;\r\n\r\n\t\t/**\r\n\t\t * Event listener que trae los datos del usuario antes de entrar a la vista\r\n\t\t */\r\n\t\t$scope.$on('$ionicView.beforeEnter', function() {\r\n\t\t\tUser.get($scope.user.id)\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\t$scope.user = response.userData.data;\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n]);","/**\r\n * Controller que maneja la vista profile_edit.html y que procesa los datos necesarios para\r\n * la edición de los datos del usuario\r\n */\r\nangular.module('FlipMeet.controllers')\r\n.controller('ProfileEditionCtrl', [\r\n\t'$scope',\r\n\t'$state',\r\n\t'$stateParams',\r\n\t'$ionicPopup',\r\n\t'API',\r\n\t'Storage',\r\n\t'Interest',\r\n\t'User',\r\n\tfunction($scope, $state, $stateParams, $ionicPopup, API, Storage, Interest, User) {\r\n\t\t/** @var {object} user - Inicializo el object user */\r\n\t\t$scope.user = {\r\n\t\t\tid: null,\r\n\t\t\tname: null,\r\n\t\t\tlastname: null,\r\n\t\t\tlocation: null,\r\n\t\t\tbirthday: null,\r\n\t\t\tfkinterest: null\r\n\t\t};\r\n\r\n\t\t/** @var {string} imgRoute - Contiene la ruta a los recursos de imagen */\r\n\t\t$scope.imgRoute = API + \"/img/\";\r\n\r\n\t\t// Obtengo el user ID del servicio $stateParams\r\n\t\t$scope.user.id = $stateParams.id;\r\n\r\n\t\t/**\r\n\t\t * @function get - Ejecuta la función get() del servicio User\r\n\t\t * @param {int} id\r\n\t\t * @return {object} user\r\n\t\t */\r\n\t\tUser.get($scope.user.id)\r\n\t\t\t.then(function(response) {\r\n\t\t\t\t$scope.user = response.userData.data;\r\n\t\t\t});\r\n\r\n\t\t/** @var {array} interests - Inicializo el array interests */\r\n\t\t$scope.interests = [];\r\n\r\n\t\t/**\r\n\t\t * @function getAll - Ejecuta la función getAll() del servicio Interest\r\n\t\t * @param {object} data\r\n\t\t * @return {object} user\r\n\t\t */\r\n\t\tInterest.getAll().then(function(data) {\r\n\t\t\t$scope.interests = data;\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * @function edit - Ejecuta la función update() del servicio User\r\n\t\t * @param {object} user\r\n\t\t */\r\n\t\t$scope.edit = function(user) {\r\n\t\t\tUser.update(user)\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\tif(response.success) {\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\ttitle: '¡Éxito!',\r\n\t\t\t\t\t\t\ttemplate: 'Tu perfil ha sido editado exitosamente.',\r\n\t\t\t\t\t\t\tokText: 'Aceptar'\r\n\t\t\t\t\t\t}).then(function() {\r\n\t\t\t\t\t\t\t$state.go('app.profile');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\ttitle: 'Error',\r\n\t\t\t\t\t\t\ttemplate: response.error,\r\n\t\t\t\t\t\t\tokText: 'Aceptar'\r\n\t\t\t\t\t\t}).then(function() {\r\n\t\t\t\t\t\t\tif(response.login) {\r\n\t\t\t\t\t\t\t\t$state.go('login');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t}\r\n]);","/**\r\n * Controller que maneja la vista register.html y que procesa los datos necesarios para\r\n * al alta de un nuevo usuario\r\n */\r\nangular.module('FlipMeet.controllers')\r\n.controller('RegisterCtrl', [\r\n\t'$scope',\r\n\t'$state',\r\n\t'$ionicPopup',\r\n\t'User',\r\n\t'Interest',\r\n\tfunction($scope, $state, $ionicPopup, User, Interest) {\r\n\t\t/** @var {object} user - Inicializo el object user */\r\n\t\t$scope.user = {\r\n\t\t\tname: null,\r\n\t\t\tlastname: null,\r\n\t\t\temail: null,\r\n\t\t\tpassword: null,\r\n\t\t\tlocation: null,\r\n\t\t\tbirthday: null,\r\n\t\t\tfkinterest: null\r\n\t\t};\r\n\t\t\r\n\t\t/** @var {array} interests - Inicializo el array interests */\r\n\t\t$scope.interests = [];\r\n\r\n\t\t/**\r\n\t\t * @function getAll - Ejecuta la función getAll() del servicio Interest\r\n\t\t * @param {object} data\r\n\t\t * @return {object} interests\r\n\t\t */\r\n\t\tInterest.getAll().then(function(data) {\r\n\t\t\t$scope.interests = data;\r\n\t\t});\r\n\r\n\t\t/** @var {object} validationErrors - Inicializo el object validationErrors */\r\n\t\t$scope.validationErrors = {\r\n\t\t\tname: false,\r\n\t\t\tlastname: false,\r\n\t\t\temail: false,\r\n\t\t\tpassword: false,\r\n\t\t\tlocation: false,\r\n\t\t\tbirthday: false,\r\n\t\t\tfkinterest: false\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @function add - Ejecuta la función create() del servicio User\r\n\t\t * @param {object} user\r\n\t\t */\r\n\t\t$scope.add = function(user) {\r\n\t\t\tUser.create(user)\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\tif(response.success == 0) {\r\n\t\t\t\t\t\t// Seteo los errores de validación en false\r\n\t\t\t\t\t\t$scope.validationErrors = false;\r\n\r\n\t\t\t\t\t\t// Seteo los oldInputs en false\r\n\t\t\t\t\t\t$scope.oldInputs = false;\r\n\r\n\t\t\t\t\t\t// Muestro el mensaje de éxito\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\ttitle: '¡Éxito!',\r\n\t\t\t\t\t\t\ttemplate: 'El usuario se ha registrado exitosamente',\r\n\t\t\t\t\t\t\tokText: 'Aceptar'\r\n\t\t\t\t\t\t}).then(function() {\r\n\t\t\t\t\t\t\t$state.go('login');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if(response.success == 3) {\r\n\t\t\t\t\t\t$ionicPopup.alert({\r\n\t\t\t\t\t\t\t\ttitle: 'Error',\r\n\t\t\t\t\t\t\t\ttemplate: response.errorMsg,\r\n\t\t\t\t\t\t\t\tokText: 'Aceptar'\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Rescato los errores de validación\r\n\t\t\t\t\t\tfor (let key in $scope.validationErrors) {\r\n\t\t\t\t\t\t\tif(response[key] !== undefined) {\r\n\t\t\t\t\t\t\t\t$scope.validationErrors[key] = response[key][0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t};\r\n\t}\r\n]);","/**\r\n * Servicio que realiza las peticiones al controller LogController de la api back end.\r\n */\r\n angular.module('FlipMeet.services')\r\n.factory('Auth', [\r\n\t'$http',\r\n\t'API_MVC',\r\n\t'Storage',\r\n\tfunction($http, API_MVC, Storage) {\r\n\t\t/** @var {string/null} token - Inicializo la variable token */\r\n\t\tlet token = null;\r\n\t\t/** @var {object} userData - Inicializo el object userData */\r\n\t\tlet userData = {\r\n\t\t\tid: null\r\n\t\t\t//name: null,\r\n\t\t\t//lastname: null,\r\n\t\t\t//email: null,\r\n\t\t\t//password: null,\r\n\t\t\t\r\n\t\t\t//birthday: null,\r\n\t\t\t//fkinterest: null\r\n\t\t};\r\n\r\n\t\t//Primero que nada, verifico los datos del localStorage\r\n\t\t/*Eso me servirá para, cuando el usuario entre a la app, loguearlo sin necesidad\r\n\t\tde que llene nuevamente el formulario de login*/\r\n\t\t/*Lo hago con una IIFE ya que como esta función sólo necesita ser invocada una vez, en este servicio e\r\n\t\tinmediatamente luego de su creación, no se necesita asignarle un nombre a la función (sólo estaría ocupando\r\n\t\tel global namespace e incrementando la posibilidad de colisiones entre identificadores sin necesidad)*/\r\n\t\t/**\r\n\t\t * @function - IIFE\r\n\t\t * Trata de loguear al usuario con datos almacenados en el localStorage\r\n\t\t */\r\n\t\t(function () {\r\n\t\t    if(Storage.has('token')) {\r\n\t\t\t\ttoken = Storage.get('token');\r\n\t\t\t\tuserData = Storage.get('userData');\r\n\t\t\t}\r\n\t\t})();\r\n\r\n\t\t/**\r\n\t\t * @function isLogged\r\n\t\t * Informa si el usuario está logueado\r\n\t\t * @return {boolean}\r\n\t\t */\r\n\t\tlet isLogged = function() {\r\n\t\t\treturn token !== null;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @function getToken\r\n\t\t * Retorna el token de autenticación\r\n\t\t * @return string|null\r\n\t\t */\r\n\t\tlet getToken = function() {\r\n\t\t\treturn token;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @function getUserData\r\n\t\t * Retorna la info del usuario autenticado\r\n\t\t * @return {{}}\r\n\t\t */\r\n\t\tlet getUserData = function() {\r\n\t\t\treturn {\r\n\t\t\t\tid: userData.id\r\n\t\t\t\t//name: userData.name,\r\n\t\t\t\t//lastname: userData.lastname,\r\n\t\t\t\t//email: userData.email,\r\n\t\t\t\t//password: userData.password,\r\n\t\t\t\t//location: userData.location,\r\n\t\t\t\t//birthday: userData.birthday,\r\n\t\t\t\t//fkinterest: userData.fkinterest\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @function login\r\n\t\t * Intenta loguear al usuario\r\n\t\t * @param {{}} data\r\n\t\t * @return {Promise}\r\n\t\t */\r\n\t\tlet login = function(data) {\r\n\t\t\treturn $http.post(API_MVC + \"/login\", data).then(\r\n\t\t\t\tfunction(rta) {\r\n\t\t\t\t\tlet response = rta.data;\r\n\t\t\t\t\tif(response.status == 0) {\r\n\t\t\t\t\t\ttoken = response.data.token;\r\n\t\t\t\t\t\tuserData = {\r\n\t\t\t\t\t\t\tid: response.data.id\r\n\t\t\t\t\t\t\t//name: response.data.name,\r\n\t\t\t\t\t\t\t//lastname: response.data.lastname,\r\n\t\t\t\t\t\t\t//email: response.data.email,\r\n\t\t\t\t\t\t\t//password: response.data.password,\r\n\t\t\t\t\t\t\t//location: response.data.location,\r\n\t\t\t\t\t\t\t//birthday: response.data.birthday,\r\n\t\t\t\t\t\t\t//fkinterest: response.data.fkinterest\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tStorage.set('token', token);\r\n\t\t\t\t\t\tStorage.set('userData', userData);\r\n\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tsuccess: true\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t\terror: response.msgs.error\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @function logout\r\n\t\t * Cierra la sesión.\r\n\t\t */\r\n\t\tlet logout = function() {\r\n\t\t\tStorage.remove('token');\r\n\t\t\tStorage.remove('userData');\r\n\t\t\ttoken = null;\r\n\t\t\tuserData = {\r\n\t\t\t\tid: null\r\n\t\t\t\t//name: null,\r\n\t\t\t\t//lastname: null,\r\n\t\t\t\t//email: null,\r\n\t\t\t\t//password: null,\r\n\t\t\t\t//location: null,\r\n\t\t\t\t//birthday: null,\r\n\t\t\t\t//fkinterest: null\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\t//Retorno los valores obtenidos por las funciones del servicio para que tengan visibilidad\r\n\t\treturn {\r\n\t\t\tlogin\t\t: login,\r\n\t\t\tlogout\t\t: logout,\r\n\t\t\tisLogged\t: isLogged,\r\n\t\t\tgetToken\t: getToken,\r\n\t\t\tgetUserData\t: getUserData\r\n\t\t};\r\n\t}\r\n]);","/**\r\n * Servicio que realiza las peticiones al controller CategoriesController de la api back end.\r\n */\r\n angular.module('FlipMeet.services')\r\n.factory('Category', [\r\n\t'$http',\r\n\t'API_MVC',\r\n\tfunction($http, API_MVC) {\r\n\t\t\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @function getAll\r\n\t\t\t * Realiza la petición de todas las categorías de publicaciones\r\n\t\t\t * @return JSON\r\n\t\t\t */\r\n\t\t\tgetAll: function() {\r\n\t\t\t\treturn $http.get(API_MVC + '/categories')\r\n\t\t\t\t\t.then(function(rta) {\r\n\t\t\t\t\t\tlet response = rta.data;\r\n\r\n\t\t\t\t\t\tif(response.status == 0) {\r\n\t\t\t\t\t\t\tlet categories = response.data;\r\n\t\t\t\t\t\t\treturn JSON.parse(JSON.stringify(categories));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n]);","/**\r\n * Servicio que realiza las peticiones al controller CommentsController de la api back end.\r\n */\r\n angular.module('FlipMeet.services')\r\n.factory('Comment', [\r\n\t'$http',\r\n\t'API_MVC',\r\n\t'Auth',\r\n\tfunction($http, API_MVC, Auth) {\r\n\t\t\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @function add\r\n\t\t\t * Realiza la petición de agregado de un nuevo comentario\r\n\t\t\t * @param {object} comment\r\n\t\t\t * @return {{}}\r\n\t\t\t */\r\n\t\t\tadd: function(comment) {\r\n\t\t\t\t\treturn $http.post(API_MVC + '/comments', comment, {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t'X-Token': Auth.getToken()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).then(function(rta) {\r\n\t\t\t\t\t\tlet response = rta.data;\r\n\t\t\t\t\t\tif (response.status == 0) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (response.status == -2) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t\t\terror: response.msgs.error,\r\n\t\t\t\t\t\t\t\tlogin: true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t\t\terror: response.msgs.error\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n]);","/**\r\n * Servicio que realiza las peticiones al controller CommentsController de la api back end.\r\n */\r\n angular.module('FlipMeet.services')\r\n.factory('Interest', [\r\n\t'$http',\r\n\t'API_MVC',\r\n\tfunction($http, API_MVC) {\r\n\t\t\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @function getAll\r\n\t\t\t * Realiza la petición de todos los posibles intereses de los usuarios\r\n\t\t\t * @return JSON\r\n\t\t\t */\r\n\t\t\tgetAll: function() {\r\n\t\t\t\treturn $http.get(API_MVC + '/interests')\r\n\t\t\t\t\t.then(function(rta) {\r\n\t\t\t\t\t\tlet response = rta.data;\r\n\r\n\t\t\t\t\t\tif(response.status == 0) {\r\n\t\t\t\t\t\t\tlet interests = response.data;\r\n\t\t\t\t\t\t\treturn JSON.parse(JSON.stringify(interests));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n]);","/**\r\n * Servicio que realiza las peticiones al controller PostsController de la api back end.\r\n */\r\n angular.module('FlipMeet.services')\r\n.factory('Post', [\r\n\t'$http',\r\n\t'API_MVC',\r\n\t'Auth',\r\n\tfunction($http, API_MVC, Auth) {\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @function getAll\r\n\t\t\t * Realiza la petición de todas las publicaciones de los usuarios\r\n\t\t\t * @return JSON\r\n\t\t\t */\r\n\t\t\tgetAll: function() {\r\n\t\t\t\treturn $http.get(API_MVC + '/posts')\r\n\t\t\t\t\t.then(function(rta) {\r\n\t\t\t\t\t\tlet response = rta.data;\r\n\t\t\t\t\t\tif(response.status == 0) {\r\n\t\t\t\t\t\t\tlet posts = response.data;\r\n\t\t\t\t\t\t\treturn JSON.parse(JSON.stringify(posts));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * @function get\r\n\t\t\t * @param {int} id\r\n\t\t\t * Realiza la petición de una publicación específica\r\n\t\t\t * @return {{}}\r\n\t\t\t */\r\n\t\t\tget: function(id) {\r\n\t\t\t\t\treturn $http.get(API_MVC + '/posts/' + id)\r\n\t\t\t\t\t\t.then(function(response) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\t\t\tpostData: response.data\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tfunction(error) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t\t\terror: response.msgs.error\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * @function add\r\n\t\t\t * Realiza la petición de agregado de una nueva publicación\r\n\t\t\t * @param {object} post\r\n\t\t\t * @return {{}}\r\n\t\t\t */\r\n\t\t\tadd: function(post) {\r\n\t\t\t\t\treturn $http.post(API_MVC + '/posts', post, {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t'X-Token': Auth.getToken()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).then(function(rta) {\r\n\t\t\t\t\t\t\tlet response = rta.data;\r\n\t\t\t\t\t\t\tif (response.status == 0) {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\t\t\t\tcategory: response.data.category\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else if (response.status == -2) {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t\t\t\terror: response.msgs.error,\r\n\t\t\t\t\t\t\t\t\tlogin: true\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t\t\t\terror: response.msgs.error\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * @function getComments\r\n\t\t\t * @param {int} id\r\n\t\t\t * Realiza la petición de todos los comentarios para una publicación específica\r\n\t\t\t * @return JSON\r\n\t\t\t */\r\n\t\t\tgetComments: function(id) {\r\n\t\t\t\t\treturn $http.get(API_MVC + '/posts/' + id + '/comments')\r\n\t\t\t\t\t\t.then(function(rta) {\r\n\t\t\t\t\t\t\tlet response = rta.data;\r\n\t\t\t\t\t\t\tif(response.status == 0) {\r\n\t\t\t\t\t\t\t\tlet comments = response.data;\r\n\t\t\t\t\t\t\t\treturn JSON.parse(JSON.stringify(comments));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n]);","/**\r\n * Servicio que intercambia datos con el localStorage\r\n */\r\n angular.module('FlipMeet.services')\r\n.factory('Storage', function() {\r\n\treturn {\r\n\t\t/**\r\n\t\t * @function set\r\n\t\t * Agrega un item al Storage\r\n\t\t * @param {string} key\r\n\t\t * @param {*} value\r\n\t\t */\r\n\t\tset: function(key, value) {\r\n\t\t\tlocalStorage.setItem(key, JSON.stringify(value));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @function get\r\n\t\t * Obtiene un valor del Storage\r\n\t\t * @param {string} key\r\n\t\t * @return {*}\r\n\t\t */\r\n\t\tget: function(key) {\r\n\t\t\treturn JSON.parse(localStorage.getItem(key));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @function has\r\n\t\t * Verifica si tiene la key en el Storage\r\n\t\t * @param {string} key\r\n\t\t * @return {boolean}\r\n\t\t */ \r\n\t\thas: function(key) {\r\n\t\t\treturn localStorage.getItem(key) !== null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @function remove\r\n\t\t * Elimina un item del Storage\r\n\t\t * @param {string} key\r\n\t\t */\r\n\t\tremove: function(key) {\r\n\t\t\tlocalStorage.removeItem(key);\r\n\t\t}\r\n\t}\r\n});","/**\r\n * Servicio que realiza las peticiones al controller UsersController de la api back end.\r\n */\r\n angular.module('FlipMeet.services')\r\n.factory('User', [\r\n\t'$http',\r\n\t'API_MVC',\r\n\t'Storage',\r\n\t'Auth',\r\n\tfunction($http, API_MVC, Storage, Auth) {\r\n\t\t/** @var {object} user - Inicializo el object user */\r\n\t\tlet user = {}\r\n\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @function create\r\n\t\t\t * Realiza la petición de agregado de un nuevo usuario\r\n\t\t\t * @param {object} user\r\n\t\t\t * @return {{}}\r\n\t\t\t */\r\n\t\t\tcreate: function(user) {\r\n\t\t\t\treturn $http.post(API_MVC + '/users', user)\r\n\t\t\t\t\t.then(function(rta) {\r\n\t\t\t\t\t\tlet response = rta.data;\r\n\t\t\t\t\t\tconsole.log(response);\r\n\t\t\t\t\t\tif(response.status == 1) {\r\n\t\t\t\t\t\t\t//token = response.data.token;\r\n\t\t\t\t\t\t\t/*userData = {\r\n\t\t\t\t\t\t\t\tid: response.data.id\r\n\t\t\t\t\t\t\t\tname: response.data.name,\r\n\t\t\t\t\t\t\t\tlastname: response.data.lastname,\r\n\t\t\t\t\t\t\t\temail: response.data.email,\r\n\t\t\t\t\t\t\t\tpassword: response.data.password,\r\n\t\t\t\t\t\t\t\tlocation: response.data.location,\r\n\t\t\t\t\t\t\t\tbirthday: response.data.birthday,\r\n\t\t\t\t\t\t\t\tfkinterest: response.data.fkinterest\r\n\t\t\t\t\t\t\t};*/\r\n\t\t\t\t\t\t\t//Storage.set('token', token);\r\n\t\t\t\t\t\t\t//Storage.set('userData', userData);\r\n\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: 0,\r\n\t\t\t\t\t\t\t\tmsg: response.message\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (response.status == 3) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: 3,\r\n\t\t\t\t\t\t\t\terrorMsg: response.message\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tlet validationErrors = response.validationErrors;\r\n\t\t\t\t\t\t\treturn JSON.parse(JSON.stringify(validationErrors));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * @function get\r\n\t\t\t * @param {int} id\r\n\t\t\t * Realiza la petición de un usuario específico\r\n\t\t\t * @return {{}}\r\n\t\t\t */\r\n\t\t\tget: function(id) {\r\n\t\t\t\t\treturn $http.get(API_MVC + '/users/' + id)\r\n\t\t\t\t\t\t.then(function(response) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\t\t\tuserData: response.data\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tfunction(error) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t\t\terror: response.msgs.error\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * @function update\r\n\t\t\t * @param {object} user\r\n\t\t\t * Realiza la petición para la edición de un usuario\r\n\t\t\t * @return {{}}\r\n\t\t\t */\r\n\t\t\tupdate: function(user) {\r\n\t\t\t\treturn $http.put(API_MVC + '/users/' + user.id, user, {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t'X-Token': Auth.getToken()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).then(function(rta) {\r\n\t\t\t\t\t\tlet response = rta.data;\r\n\t\t\t\t\t\tif (response.status == 0) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (response.status == -2) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t\t\terror: response.msgs.error,\r\n\t\t\t\t\t\t\t\tlogin: true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t\t\terror: response.msgs.error\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n]);"]}